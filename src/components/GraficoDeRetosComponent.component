<apex:component Controller="EjesDeTrabajoController">

<apex:includeScript value="{!$Resource.html2canvas}"/>
<apex:includeScript value="{!$Resource.Canvg}"/>
    
    <style>
        
        .pbSubheader h3 {
        display: inline;
        margin-left: 5px;
        font-weight: bold;
        }
        
        .icon-sectors-botonera {
        width: 38px;            
        }
        
        .tableHeader{
        text-align: center !important;
        }
        
        .contenidoTabla{
        text-transform: capitalize;
        color:black;
        }
        
        .cabeceraTabla{
        background-color:hsla(203,68%,37%,1);
        color:white;
        }
        
        .bordesDeCuerpo{
        border: 1px solid black !important;
        }
        
        .sinBordes{
        border-bottom-color: hsla(203,68%,37%,1) !important;
        }
        
        .Mala{
        background-color: #FB5E5E !important;
        }
        
        .Regular{
        background-color: #feff00 !important;
        }
        
        .Buena{
        background-color: #09ce0c !important;
        }
        
        .aca{
        min-height: 105px;
        }
        
        .node {
        cursor: pointer;
        }
        
        .node circle {
        fill: #fff;
        stroke: steelblue;
        stroke-width: 3px;
        }
        
        .node text {
        font: 12px sans-serif;
        }
        
        .link {
        fill: none;
        stroke: #ccc;
        stroke-width: 2px;
        }
        
         #circle {
      width: 20px;
      height: 20px;
      -webkit-border-radius: 25px;
      -moz-border-radius: 25px;
      border-radius: 25px;
      background: orange;
        float:left;
    }
        
        .colorprueba{
        background-color:orange !important;
        }
        
        .colorBlanco{
            background-color:white;
        }
    </style>
    
    
   
    
    <apex:outputpanel styleClass="container-fluid bootstrap-sf1 colorBlanco" id="pageContent">
        
         <apex:outputPanel rendered="{! !hayDatos}">
                
                <div style = "width: 98%;" class="center-block alert alert-warning" role="alert">
                    <span class="glyphicon glyphicon-warning-sign" aria-hidden="true"></span>
                    {!$Label.No_hay_datos_cargados_en_4Planning_Lite_Complete_el_cuestionario_y_vuelva_a_ing}
                </div>
                
            </apex:outputPanel>
            
            
            <apex:outputPanel rendered="{!hayDatos}">
                
                <button type="button" class="btn btn-default btn-sm generateImg" data-value="saveImg" data-msg="{!$Label.save_msg}">
                                <!--<apex:image style="height:35px;" url="{!URLFOR($Resource.iconoDescarga)}" styleClass="icon-sectors-botonera"/> -->   
                        		<span class="glyphicon glyphicon-picture icon-btn-left"></span>&nbsp;Descargar im√°gen
                                </button>
                
                
                
                <br/>
                <br/>
                <div id="ImagenAGenerar">
                    <div class="alert alert-info" role="alert">	
                        <span class="glyphicon glyphicon-info-sign"></span>	    				
                        <span class="messageText"><span style="font-weight:bold;  margin:5px">{!$Label.Asignaci_n_para_Ejes_de_Trabajo}</span><br/>
                            
                            
                            <table style="text-align:center; margin-left: 20%; width:60%;">
                                <tr>
                                    <th style="width: 15%;text-align: center;">
                                        A - {!$Label.Area}
                                        <p>
                                            {!$Label.EntrePar_Conocimiento}
                                        </p>
                                    </th>
                                    <th style="width: 15%;text-align: center;">
                                        R - {!$Label.Reto}
                                        <p>
                                            {!$Label.EntrePar_Etapa}
                                        </p>
                                    </th>
                                    <th style="width: 15%;text-align: center;">
                                        CO - {!$Label.Contactos}
                                        <p>
                                            {!$Label.EntrePar_Relaci_n}
                                        </p>
                                    </th>
                                    <th style="width: 15%;text-align: center;">
                                        S - {!$Label.Soluciones}
                                        <p>
                                            {!$Label.EntrePar_Estado}
                                        </p>
                                    </th>
                                </tr>
                                <tr class="Mala">
                                    <td>
                                        {!$Label.Bajo}
                                    </td>
                                    <td>
                                        {!$Label.Implementacion}
                                    </td>
                                    <td>
                                        {!$Label.No_lo_conozco}
                                    </td>
                                    <td>
                                        {!$Label.no_disponible}
                                    </td>
                                </tr>
                                <tr class="Mala">
                                    <td>
                                        -
                                    </td>
                                    <td>
                                        {!$Label.Compras}
                                    </td>
                                    
                                    <td>
                                        -
                                    </td>
                                    <td>-
                                    </td>
                                </tr>
                                <tr class="Regular">
                                    <td>
                                        {!$Label.Medio}
                                    </td>
                                    <td>
                                        {!$Label.RFP_RFI}
                                    </td>
                                    <td>
                                        {!$Label.Ocasional_pero_Cordial}
                                    </td>
                                    <td>
                                        {!$Label.en_desarrollo}
                                    </td>
                                </tr>
                                <tr class="Regular">
                                    <td>
                                        -
                                    </td>
                                    <td>
                                        -
                                    </td>
                                    <td>
                                        {!$Label.Intensa_y_Dif_cil}
                                    </td>
                                    <td>
                                        -
                                    </td>
                                </tr>
                                <tr class="Buena">
                                    <td>
                                        {!$Label.Alto}
                                    </td>
                                    <td>
                                        {!$Label.Prospecci_n}
                                    </td>
                                    <td>
                                        {!$Label.Fluida_y_Constante}
                                    </td>
                                    <td>
                                        {!$Label.disponible}
                                    </td>
                                </tr>
                                <tr class="Buena">
                                    <td>
                                        -
                                    </td>
                                    <td>
                                        {!$Label.Dise_o}
                                    </td>
                                    <td>
                                        -
                                    </td>
                                    <td>
                                        -
                                    </td>
                                </tr>
                            </table>
                            
                            
                        </span>
                    </div>
                    
                    <br/><br/>
                    
               
                    <apex:includeScript value="{!$Resource.d3}" />
                    
                    <div id="container"></div>
                    
                    <script>
                    
                    var treeData = [{!js}]
                    
                    
                    // ************** Generate the tree diagram	 *****************
                    var margin = {top: 0, right: 0, bottom: 0, left: 120},
                        width = 1100 - margin.right - margin.left,
                        height = 600 - margin.top - margin.bottom;
                    
                    var i = 0,
                        duration = 750,
                        root;
                    
                    var tree = d3.layout.tree()
                    .size([height, width]);
                    
                    var diagonal = d3.svg.diagonal()
                    .projection(function(d) { return [d.y, d.x]; });
                    
                    var svg = d3.select("#container").append("svg")
                    .attr("width", width + margin.right + margin.left)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                    
                    root = treeData[0];
                    root.x0 = height / 2;
                    root.y0 = 0;
                    
                    update(root);
                    
                    d3.select(self.frameElement).style("height", "600px");
                    
                    function update(source) {
                        
                        // Compute the new tree layout.
                        var nodes = tree.nodes(root).reverse(),
                            links = tree.links(nodes);
                        
                        // Normalize for fixed-depth.
                        nodes.forEach(function(d) { d.y = d.depth * 180; });
                        
                        // Update the nodes‚Ä¶
                        var node = svg.selectAll("g.node")
                        .data(nodes, function(d) { return d.id || (d.id = ++i); });
                        
                        // Enter any new nodes at the parent's previous position.
                        var nodeEnter = node.enter().append("g")
                        .attr("class", "node")
                        .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
                        .on("click", click);
                        
                        nodeEnter.append("circle")
                        .attr("r", function(d) { return d.value; })
                        .style("stroke", function(d) { return d.type; })
                        .style("fill", function(d) { return d.level; });
                        
                        nodeEnter.append("text")
                        .attr("x", function(d) {return d.children || d._children ? -13 : 13;})
                        .attr("y", function(d) {if(d.children!=null){return -10}})
                        .attr("dy", ".35em")
                        .attr("text-anchor", function(d) {return d.children || d._children ? "end" : "start";})
                        
                        .text(function(d) {if (d.children!= null && d.name != null && d.name.length > 22){
                            return d.name.substring(0,21) + '...'}
                                           else{
                                               return d.name;}})
                        
                        //.text(function(d) { return d.name; })
                        .style("fill-opacity", 1e-6);
                        
                        // Transition nodes to their new position.
                        var nodeUpdate = node.transition()
                        .duration(duration)
                        .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });
                        
                        nodeUpdate.select("circle")
                        .attr("r", 10)
                        .style("fill", function(d) { return d.prueba; });
                        
                        nodeUpdate.select("text")
                        .style("fill-opacity", 1);
                        
                        // Transition exiting nodes to the parent's new position.
                        var nodeExit = node.exit().transition()
                        .duration(duration)
                        .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
                        .remove();
                        
                        nodeExit.select("circle")
                        .attr("r", 1e-6);
                        
                        nodeExit.select("text")
                        .style("fill-opacity", 1e-6);
                        
                        // Update the links‚Ä¶
                        var link = svg.selectAll("path.link")
                        .data(links, function(d) { return d.target.id; });
                        
                        // Enter any new links at the parent's previous position.
                        link.enter().insert("path", "g")
                        .attr("class", "link")
                        .style("stroke", function(d) { return d.target.level; })
                        .attr("d", function(d) {
                            var o = {x: source.x0, y: source.y0};
                            return diagonal({source: o, target: o});
                        });
                        
                        // Transition links to their new position.
                        link.transition()
                        .duration(duration)
                        .attr("d", diagonal);
                        
                        // Transition exiting nodes to the parent's new position.
                        link.exit().transition()
                        .duration(duration)
                        .attr("d", function(d) {
                            var o = {x: source.x, y: source.y};
                            return diagonal({source: o, target: o});
                        })
                        .remove();
                        
                        // Stash the old positions for transition.
                        nodes.forEach(function(d) {
                            d.x0 = d.x;
                            d.y0 = d.y;
                        });
                    }
                    
                    // Toggle children on click.
                    function click(d) {
                        if (d.children) {
                            d._children = d.children;
                            d.children = null;
                        } else {
                            d.children = d._children;
                            d._children = null;
                        }
                        update(d);
                    }
                    
                    
               
               $j = jQuery.noConflict();
    
    $j(document).ready(function() {
        
        
        
        //Bajar grafico como imagen
        $j(".generateImg").click(function(){
            zoom=1;
            $j("#ImagenAGenerar").animate({ 'zoom': zoom }, 0);
            var chartArea = $j('#ImagenAGenerar');
            
            
            var nodesToRecover = [];
            var nodesToRemove = [];

            var svgElem = chartArea.find('svg');
        
           var svg = svgElem.select(".node");
             
            svg.append("circle")
            .attr("fill", "#fff")
            .attr("stroke", "steelblue")
            .attr("stroke-width", "3px");
           
           svg.append("link")
            .attr("stroke", "black")
            .attr("stroke-width", "1px");
            
            svg.append("text")
            .attr("font", "17 px sans-serif");
        
            
           svgElem.each(function(index, node) {
                   var parentNode = node.parentNode;
                   var svg = parentNode.innerHTML;

                    var canvas = document.createElement('canvas');
                
                    canvg(canvas, svg);
                
                    nodesToRecover.push({
                        parent: parentNode,
                        child: node
                    });
                    parentNode.removeChild(node);
                
                    nodesToRemove.push({
                        parent: parentNode,
                        child: canvas
                    });


                parentNode.appendChild(canvas);
            });          
                        
                       html2canvas(chartArea, {
                            onrendered: function(canvas) {
                                
                                var ctx = canvas.getContext('2d');
                                ctx.webkitImageSmoothingEnabled = false;
                                ctx.mozImageSmoothingEnabled = false;
                                ctx.imageSmoothingEnabled = false;
                                
                    
                    var img = canvas.toDataURL("image/png");
                    //window.location.href = img.replace('image/png', 'image/octet-stream');
                    var ua = window.navigator.userAgent;
                    if (ua.indexOf("Chrome") > 0) {
                        var link = document.createElement('a');
                        link.download = "EjesDeTrabajo.png";
                        link.href = img.replace('image/png', 'image/octet-stream');
                        link.click();
                    } else {
                        window.location.href = img.replace('image/png', 'image/octet-stream');
                    }
                }
            });    
        });
        
        
    });
                 </script>
                </div>
           </apex:outputPanel>
        </apex:outputPanel>
</apex:component>